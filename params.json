{"name":"Ellipsis","tagline":"Ellipsis is a series of dots that usually indicate an intentional omission of a word, sentence or whole section from the original text being quoted, and though necessary for syntactical construction, is not necessary for comprehension.","body":"Ellipsis Plugin\r\n=====================\r\nThere are many scenarios in the display of online text where shortened, truncated representations are best used. For these scenarios, many opt for the implementation of ellipses. Ellipsis is a customizable jQuery plugin for the smart truncation of text base on container width and not character count.\r\n\r\n## How to use it\r\nAttach the ellipsis to an element\r\n`(elementent).ellipsis();`\r\n\r\nTo ellipsis a paragraph, a class is needed to indicate it is multiline. The default class is `multiline`, this can be change through the plugin option.\r\n\r\n## Plugin options\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Default</th>\r\n      <th>Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>ellipsis</td>\r\n      <td>string</td>\r\n      <td>...</td>\r\n      <td>ellipsis element with this</td>\r\n    </tr>\r\n    <tr>\r\n      <td>multiClass</td>\r\n      <td>string</td>\r\n      <td>multiline</td>\r\n      <td>class to use to determine if element is multiline ellipsis</td>\r\n    </tr>\r\n    <tr>\r\n      <td>href</td>\r\n      <td>string</td>\r\n      <td>none</td>\r\n      <td>make the ellipsis into a clickable link</td>\r\n    </tr>\r\n    <tr>\r\n      <td>target</td>\r\n      <td>string</td>\r\n      <td>'_self'</td>\r\n      <td>ellipsis link target '_self' or '_blank'</td>\r\n    </tr>\r\n    <tr>\r\n      <td>before</td>\r\n      <td>string</td>\r\n      <td>none</td>\r\n      <td>insert any character before the ellipsis</td>\r\n    </tr>\r\n    <tr>\r\n      <td>after</td>\r\n      <td>string</td>\r\n      <td>none</td>\r\n      <td>insert any character after the ellipsis</td>\r\n    </tr>\r\n    <tr>\r\n      <td>title</td>\r\n      <td>boolean</td>\r\n      <td>0</td>\r\n      <td>add a title attribute with content to the ellipsis container</td>\r\n    </tr>\r\n    <tr>\r\n      <td>wrape</td>\r\n      <td>string</td>\r\n      <td>none/td>\r\n      <td>wrape the ellipsis with the html tag</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<i>For the boolean options above use 0 or 1 instead of false or true.</i>\r\n\r\n## Plugin options taken to the next level\r\nAll options above are configurable with HTML5 data attribute. This is a significantly cleaner solution (as long as you donâ€™t mind the inline approach).\r\n\r\nYou can use the standard approach\r\n```\r\n$(elementent1).ellipsis();\r\n$(elementent2).ellipsis({ellipsis: 'read more', multiClass: 'multi'});\r\n$(elementent3).ellipsis({title: 1});\r\n```\r\n<strong>or</strong>\r\n\r\nHTML5 data approach\r\n```\r\ndata-plugin-options='{\"ellipsis\":\"read more\",\"multiClass\":\"multi\"}'\r\ndata-plugin-options='{\"ellipsis\":\"read more\"}'\r\n$(elementent).ellipsis(); // in your js just init plugin\r\n```\r\n\r\n## Plugin callback method\r\nEllipsis has two callback. One on start and the other on complete.\r\n```\r\n$(elementent).ellipsis({\r\n  ellipsisStart: function() {\r\n    // do stuff here\r\n  },\r\n  ellipsisComplete: function() {\r\n    // do stuff here\r\n  }\r\n});\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}